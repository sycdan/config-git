#!/usr/bin/env python
import os
import subprocess
import sys

def main():
  hook_script_dir = os.path.dirname(os.path.abspath(__file__))
  repo_root_dir = subprocess.check_output(
    ["git", "rev-parse", "--show-toplevel"], text=True
  ).strip()

  # Get the list of files staged for commit
  files = subprocess.check_output(
    ["git", "diff", "--cached", "--name-only"], text=True
  ).splitlines()
  if not files:
    print("No staged files")
    sys.exit(0)

  # Check if formatting should be skipped for any file extensions
  skip_env = os.environ.get("GIT__HOOKS__SKIPFORMAT", "")
  skips = [ext.strip() for ext in skip_env.split(",") if ext.strip()]
  skipformat = {ext: True for ext in skips}
  for ext in skips:
    print(f"Formatting disabled for .{ext} files")

  # If CS formatting is enabled, ensure CSharpier is installed
  if not skipformat.get("cs"):
    try:
      subprocess.run(
        ["dotnet", "csharpier", "--version"],
        check=True,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
      )
    except subprocess.CalledProcessError:
      print("Installing CSharpier")
      subprocess.run(["dotnet", "tool", "install", "-g", "csharpier"], check=True)

  # If PY formatting is enabled, ensure Ruff is installed
  if not skipformat.get("py"):
    try:
      subprocess.run(
        [sys.executable, "-m", "ruff", "--version"],
        check=True,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
      )
    except subprocess.CalledProcessError:
      print("Installing Ruff")
      subprocess.run([sys.executable, "-m", "pip", "install", "ruff"], check=True)

  # Iterate over all staged files
  for file in files:
    file_path = os.path.join(repo_root_dir, file)
    if not os.path.exists(file_path):
      continue
    # Format the file based on its extension, provided formatting is enabled for it
    if not skipformat.get("cs") and file.endswith(".cs"):
      subprocess.run(
        [
          "dotnet",
          "csharpier",
          file,
          f"--config-path={hook_script_dir}/.csharpierrc.json",
        ],
        check=True,
      )
    if not skipformat.get("py") and file.endswith(".py"):
      subprocess.run(
        [sys.executable, "-m", "ruff", "format", file, "--quiet"],
        check=True,
      )
    # Re-stage the file
    subprocess.run(["git", "add", file], check=True)

if __name__ == "__main__":
  main()
